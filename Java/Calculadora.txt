 package br.ufpr.tads.calculadora;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Dieval Guizelini
 */
public class CalculadoraFrame extends javax.swing.JFrame implements ActionListener {

    private void mudaestado(EstadoCalculadora estadoCalculadora) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    enum EstadoCalculadora {
        INICIAL, IGNORADO, ENTRADA1, OPERADOR, ENTRADA2,
        CALCULANDO
    };
    private EstadoCalculadora estadoCalc = EstadoCalculadora.INICIAL;
    private int num1 = 0, num2 = 0;
    private char operador = ' ';
    private char sinal = '+';
    private boolean iniciandoEntrada = true;

    /**
     * Creates new form CalculadoraFrame
     */
    public CalculadoraFrame() {

        try {
            // adapta a aparencia ao sistema operacional
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CalculadoraFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(CalculadoraFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(CalculadoraFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(CalculadoraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();

        button0.addActionListener(this);
        button1.addActionListener(this);
        button2.addActionListener(this);
        button3.addActionListener(this);
        button4.addActionListener(this);
        button5.addActionListener(this);  
        button6.addActionListener(this);
        button7.addActionListener(this);
        button8.addActionListener(this);
        button9.addActionListener(this);
        // decimal ou virgula
        buttonIgual.addActionListener(this);
        // operacoes
        buttonMais.addActionListener(this);
        buttonMenos.addActionListener(this);
        buttonVezes.addActionListener(this);
        buttonDiv.addActionListener(this);
        buttonLimpa.addActionListener(this);

        setLocationRelativeTo(null);
        setMinimumSize(new Dimension(280, 300));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        displayTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        buttonMais = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        buttonMenos = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        buttonVezes = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        buttonIgual = new javax.swing.JButton();
        buttonLimpa = new javax.swing.JButton();
        buttonDiv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculadora");

        displayTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        displayTextField.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayTextField)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.GridLayout(4, 4, 2, 2));

        button7.setText("7");
        jPanel2.add(button7);

        button8.setText("8");
        jPanel2.add(button8);

        button9.setText("9");
        jPanel2.add(button9);

        buttonMais.setText("+");
        jPanel2.add(buttonMais);

        button4.setText("4");
        jPanel2.add(button4);

        button5.setText("5");
        jPanel2.add(button5);

        button6.setText("6");
        jPanel2.add(button6);

        buttonMenos.setText("-");
        jPanel2.add(buttonMenos);

        button1.setText("1");
        jPanel2.add(button1);

        button2.setText("2");
        jPanel2.add(button2);

        button3.setText("3");
        jPanel2.add(button3);

        buttonVezes.setText("x");
        buttonVezes.setActionCommand("*");
        jPanel2.add(buttonVezes);

        button0.setText("0");
        jPanel2.add(button0);

        buttonIgual.setText("=");
        jPanel2.add(buttonIgual);

        buttonLimpa.setText("C");
        buttonLimpa.setActionCommand("limpar");
        jPanel2.add(buttonLimpa);

        buttonDiv.setText("/");
        jPanel2.add(buttonDiv);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculadoraFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton buttonDiv;
    private javax.swing.JButton buttonIgual;
    private javax.swing.JButton buttonLimpa;
    private javax.swing.JButton buttonMais;
    private javax.swing.JButton buttonMenos;
    private javax.swing.JButton buttonVezes;
    private javax.swing.JTextField displayTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   

    @Override
    public void actionPerformed(ActionEvent e) {
        // o comando limpar Ã© o mesmo para todos os estados
        if( "limpar".equals(e.getActionCommand()) ) {
            limparMemoria();
            return;
        }
        // para os demais casos, dependo do estado.
        switch (estadoCalc) {
            case INICIAL:
                trataEventoEstadoInicial(e);
                break;
            case IGNORADO:
                trataEventoEstadoIgnorado(e);
                break;
            case ENTRADA1:
                trataEventoEstadoEntrada1(e);
                break;
            case OPERADOR:
                trataEventoEstadoOperador(e);
                break;
            case ENTRADA2:
                trataEventoEstadoEntrada2(e);
                break;
            case CALCULANDO:
                trataEventoEstadoCalculando(e);
                break;
        }
    }
    
    private void mudaEstado(EstadoCalculadora novo) {
        EstadoCalculadora old = estadoCalc;
        estadoCalc = novo;
        // pÃ©simo habito para um programa grÃ¡fico...
        System.out.printf("MudanÃ§a de estado, de %s para %s\n",old,novo);
    }

    private void trataEventoEstadoInicial(ActionEvent e) {
        String cmd = e.getActionCommand();
        displayTextField.setText("0");
        if("*".equals(cmd) || "/".equals(cmd) ) {
            mudaEstado(EstadoCalculadora.IGNORADO);
            // cabe abrir uma janela de erro?
            JOptionPane.showMessageDialog(this, "OperaÃ§Ã£o invÃ¡lida.", "Erro", 
                    JOptionPane.ERROR_MESSAGE);
            // nÃ£o tendo mais o que fazer... volta ao estado inicial
            mudaEstado(EstadoCalculadora.INICIAL);
        } else if("=".equals(cmd) || "limpar".equals(cmd) ) {
            // nÃ£o identificado o que fazer...
        } else {
            mudaEstado(EstadoCalculadora.ENTRADA1);
            // para encaminhar a mensagem para o prÃ³ximo estado.
            actionPerformed(e);
        }
    }
    
    private void limparMemoria() {
        mudaEstado(EstadoCalculadora.INICIAL);
        num1 = 0;
        num2 = 0;
        operador = ' ';
        sinal = '+';
        iniciandoEntrada = true;
        displayTextField.setText("0");
    }

    private void trataEventoEstadoIgnorado(ActionEvent e) {
            JOptionPane.showMessageDialog(this, "OperaÃ§Ã£o invÃ¡lida.\nLimpando a memÃ³ria da calculadora...", "Erro", 
                    JOptionPane.ERROR_MESSAGE);
            limparMemoria();
    }

    private void trataEventoEstadoEntrada1(ActionEvent e) {
        String cmd = e.getActionCommand();
        if ("0".equals(cmd) || "1".equals(cmd) || "2".equals(cmd) || "3".equals(cmd)
                || "4".equals(cmd) || "5".equals(cmd) || "6".equals(cmd)
                || "7".equals(cmd) || "8".equals(cmd) || "9".equals(cmd)) {
            iniciandoEntrada = false;
            int num = Integer.parseInt(displayTextField.getText());
            num = num * 10 + Integer.parseInt(cmd);
            if( sinal == '-' && num>0 ) {
                num = num * (-1);
            }
            displayTextField.setText(String.format("%d", num));
            num1 = num;
        } else if (iniciandoEntrada && ("+".equals(cmd) || "-".equals(cmd)) ) {
            // informado o sinal do nÃºmero
            sinal = cmd.charAt(0);
            if( sinal == '-' ) {
                displayTextField.setText("-0");
            } else {
                displayTextField.setText("0");
            }
        } else if ("+".equals(cmd) || "-".equals(cmd) || 
                "*".equals(cmd) || "/".equals(cmd) ) {
            mudaEstado(EstadoCalculadora.OPERADOR);
            // para encaminhar a mensagem para o prÃ³ximo estado.
            actionPerformed(e);
        }
    }

    private void trataEventoEstadoEntrada2(ActionEvent e) {
        String cmd = e.getActionCommand();
        if ("0".equals(cmd) || "1".equals(cmd) || "2".equals(cmd) || "3".equals(cmd)
                || "4".equals(cmd) || "5".equals(cmd) || "6".equals(cmd)
                || "7".equals(cmd) || "8".equals(cmd) || "9".equals(cmd)) {
            int num = 0;
            if( iniciandoEntrada ) {
                num = Integer.parseInt(cmd);
            } else {
                num = Integer.parseInt(displayTextField.getText());
                num = num * 10 + Integer.parseInt(cmd);
            }
            iniciandoEntrada = false;
            if( sinal == '-' && num>0 ) {
                num = num*(-1);

            }
            displayTextField.setText(String.format("%d", num));
            num2 = num;
        } else if (iniciandoEntrada && ("+".equals(cmd) || "-".equals(cmd)) ) {
            // informado o sinal do nÃºmero
            sinal = cmd.charAt(0);
            if( sinal == '-' ) {
                displayTextField.setText("-0");
            } else {
                displayTextField.setText("0");
            }
        } else if ("+".equals(cmd) || "-".equals(cmd) || 
                "*".equals(cmd) || "/".equals(cmd) ) {
            JOptionPane.showConfirmDialog(this, "2a operaÃ§Ã£o nÃ£o implementada.\nA calculadora serÃ¡ reiniciada.");
            limparMemoria();
        } else if ("=".equals(cmd) ) {
            mudaEstado(EstadoCalculadora.CALCULANDO);
            // para encaminhar a mensagem para o prÃ³ximo estado.
            actionPerformed(e);
        }

    }

    private void trataEventoEstadoOperador(ActionEvent e) {
        String cmd = e.getActionCommand();
        this.operador = cmd.charAt(0);
        mudaEstado(EstadoCalculadora.ENTRADA2);
        iniciandoEntrada = true;
    }

    private void trataEventoEstadoCalculando(ActionEvent e) {
        String cmd = e.getActionCommand();
        if( !"=".equals(cmd) ) {
            JOptionPane.showMessageDialog(this, "A calculadora encotra-se no estado CALCULADO.\nApenas as operaÃ§Ãµes de limpar ou fechar estÃ£o disponÃ­veis.",
                    "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int result = 0;
        switch( this.operador ) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '/':
                try {
                    result = num1 / num2;
                } catch(Exception ee) {
                    result = 0;
                }
                break;
            case '*':
                result = num1 * num2;
                break;
        }
        displayTextField.setText(String.format("%d", result));
        mudaEstado(EstadoCalculadora.INICIAL);

               

    }

}
