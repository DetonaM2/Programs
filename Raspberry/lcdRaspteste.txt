import sys
import curses
import time
import RPi.GPIO as GPIO
def confiGPIO(param1):
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(14, GPIO.OUT)
GPIO.setup(15, GPIO.OUT)
GPIO.setup(18, GPIO.OUT)
GPIO.setup(23, GPIO.OUT)
GPIO.setup(24, GPIO.OUT)
GPIO.setup(25, GPIO.OUT)
GPIO.setup(8, GPIO.OUT)
GPIO.setup(7, GPIO.OUT)
return 0
def RESET_DISPLAY(param1):
if param1 == 0:
GPIO.output(14, False)
GPIO.output(15, False)
GPIO.output(18, False)
GPIO.output(23, False)
GPIO.output(24, False)
GPIO.output(25, False)
GPIO.output(8, False)
GPIO.output(7, False)
else:
GPIO.output(14, True)
GPIO.output(15, True)
GPIO.output(18, True)
GPIO.output(23, True)
GPIO.output(24, True)
GPIO.output(25, True)
GPIO.output(8, True)
GPIO.output(7, True)
return 0
def TEST_DISPLAY(param1):
RESET_DISPLAY(0)
GPIO.output(14, True)
time.sleep(param1)
GPIO.output(15, True)
time.sleep(param1)
GPIO.output(18, True)
time.sleep(param1)
GPIO.output(23, True)
time.sleep(param1)
GPIO.output(24, True)
time.sleep(param1)
GPIO.output(25, True)
time.sleep(param1)
GPIO.output(8, True)
time.sleep(param1)
GPIO.output(7, True)
return 0
def SHOW_DISPLAY(param1):
RESET_DISPLAY(0)
if param1 == 48: # numero 0
GPIO.output(14, True) # segm. a
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
GPIO.output(23, True) # segm. d
GPIO.output(24, True) # segm. e
GPIO.output(25, True) # segm. f
elif param1 == 49: # numero 1
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
elif param1 == 50: # numero 2
GPIO.output(14, True) # segm. a
GPIO.output(15, True) # segm. b
GPIO.output(23, True) # segm. d
GPIO.output(24, True) # segm. e
GPIO.output(8, True)  # segm. g
elif param1 == 51: # numero 3
GPIO.output(14, True) # segm. a
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
GPIO.output(23, True) # segm. d
GPIO.output(8, True)  # segm. g
elif param1 == 52: # numero 4
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
GPIO.output(25, True) # segm. f
GPIO.output(8, True)  # segm. g
elif param1 == 53: # numero 5
GPIO.output(14, True) # segm. a
GPIO.output(18, True) # segm. c
GPIO.output(23, True) # segm. d
GPIO.output(25, True) # segm. f
GPIO.output(8, True)  # segm. g
elif param1 == 54: # numero 6
GPIO.output(14, True) # segm. a
GPIO.output(18, True) # segm. c
GPIO.output(23, True) # segm. d
GPIO.output(24, True) # segm. e
GPIO.output(25, True) # segm. f
GPIO.output(8, True)  # segm. g
elif param1 == 55: # numero 7
GPIO.output(14, True) # segm. a
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
elif param1 == 56: # numero 8
GPIO.output(14, True) # segm. a
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
GPIO.output(23, True) # segm. d
GPIO.output(24, True) # segm. e
GPIO.output(25, True) # segm. f
GPIO.output(8, True)  # segm. g
elif param1 == 57: # numero 9
GPIO.output(14, True) # segm. a
GPIO.output(15, True) # segm. b
GPIO.output(18, True) # segm. c
GPIO.output(23, True) # segm. d
GPIO.output(25, True) # segm. f
GPIO.output(8, True)  # segm. g
elif param1 == 46: # DP (punto decimal)
GPIO.output(7, True)  # segm. DP
return 0
stdscr = curses.initscr()
curses.cbreak()
curses.start_color()
curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLUE)
curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLACK)
hsize = curses.COLS
vsize = curses.LINES
curses.curs_set(0)
curses.noecho
stdscr.border(0)
stdscr.keypad(1)
stdscr.nodelay(1)
confiGPIO(0)
RESET_DISPLAY(0)
try:
stdscr.bkgd(curses.color_pair(2))
while True:  
char = stdscr.getch()
if (char == 81 or char == 113): # Teclas Q/q
break
elif (char == 84 or char == 116): # Teclas T/t
TEST_DISPLAY(0.05)
elif (char == 65 or char == 97): # Teclas A/a
RESET_DISPLAY(1)
elif (char == 68 or char == 100): # Teclas D/d
RESET_DISPLAY(0)
elif (char >= 48 and char <= 57) or (char == 46): # Teclas NUMERICAS y DP
SHOW_DISPLAY(char)
else:
stdscr.addstr(vsize/6, (hsize/2)-24,"  ---- Test DIRETO de DISPLAY LED ---- ")
stdscr.addstr((vsize/5)+4, (hsize/2)- 22,"[T] - efetua um TEST do DISPLAY")
stdscr.addstr((vsize/5)+6, (hsize/2)- 22,"[A] - digite 1 (ACTIVA) todo o DISPLAY")
stdscr.addstr((vsize/5)+8, (hsize/2)- 22,"[D] - digite 0 (DESACTIVA) todo o DISPLAY")
stdscr.addstr((vsize/5)+10, (hsize/2)- 22,"[1..0] - digite um numero para aparecer no DISPLAY")
stdscr.addstr(vsize-4, (hsize/2)- 22," Pressione [Q] para sair   ")
stdscr.refresh()
finally:
curses.nocbreak()
stdscr.keypad(0)
curses.echo()
curses.endwin()
